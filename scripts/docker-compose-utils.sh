#!/bin/bash

# Utilit√°rios para gerenciar Docker Compose
# Uso: ./scripts/docker-compose-utils.sh [comando]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir ajuda
show_help() {
    echo -e "${BLUE}üê≥ Docker Compose Utils - Sistema Cart√≥rio${NC}"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo ""
    echo "  ${GREEN}dev${NC}          - Iniciar ambiente de desenvolvimento"
    echo "  ${GREEN}prod${NC}         - Iniciar ambiente de produ√ß√£o"
    echo "  ${GREEN}test${NC}         - Executar testes em containers"
    echo "  ${GREEN}stop${NC}         - Parar todos os servi√ßos"
    echo "  ${GREEN}restart${NC}      - Reiniciar todos os servi√ßos"
    echo "  ${GREEN}logs${NC}         - Ver logs de todos os servi√ßos"
    echo "  ${GREEN}status${NC}       - Ver status dos servi√ßos"
    echo "  ${GREEN}clean${NC}        - Limpar containers e volumes"
    echo "  ${GREEN}backup${NC}       - Fazer backup do banco de dados"
    echo "  ${GREEN}restore${NC}      - Restaurar backup do banco de dados"
    echo "  ${GREEN}health${NC}       - Verificar sa√∫de dos servi√ßos"
    echo "  ${GREEN}scale${NC}        - Escalar servi√ßos"
    echo "  ${GREEN}update${NC}       - Atualizar imagens e reiniciar"
    echo ""
    echo "Exemplos:"
    echo "  ./scripts/docker-compose-utils.sh dev"
    echo "  ./scripts/docker-compose-utils.sh logs api-gateway"
    echo "  ./scripts/docker-compose-utils.sh scale api-gateway=3"
}

# Fun√ß√£o para verificar se Docker est√° rodando
check_docker() {
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro.${NC}"
        exit 1
    fi
}

# Fun√ß√£o para aguardar servi√ßos estarem prontos
wait_for_services() {
    echo -e "${YELLOW}‚è≥ Aguardando servi√ßos estarem prontos...${NC}"
    sleep 10
    
    # Verificar sa√∫de dos servi√ßos
    local services=("api-gateway:3000" "auth-service:3001" "user-service:3002")
    
    for service in "${services[@]}"; do
        local name=$(echo $service | cut -d: -f1)
        local port=$(echo $service | cut -d: -f2)
        
        echo -e "${BLUE}üîç Verificando $name...${NC}"
        
        local max_attempts=30
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:$port/health &> /dev/null; then
                echo -e "${GREEN}‚úÖ $name est√° pronto!${NC}"
                break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
                echo -e "${RED}‚ùå $name n√£o ficou pronto ap√≥s $max_attempts tentativas${NC}"
                return 1
            fi
            
            echo -e "${YELLOW}‚è≥ Tentativa $attempt/$max_attempts - $name ainda n√£o est√° pronto...${NC}"
            sleep 2
            attempt=$((attempt + 1))
        done
    done
    
    echo -e "${GREEN}üéâ Todos os servi√ßos est√£o prontos!${NC}"
}

# Comandos principais
case "$1" in
    "dev")
        echo -e "${BLUE}üöÄ Iniciando ambiente de desenvolvimento...${NC}"
        check_docker
        docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
        wait_for_services
        echo -e "${GREEN}‚úÖ Ambiente de desenvolvimento iniciado!${NC}"
        echo -e "${BLUE}üìã URLs dispon√≠veis:${NC}"
        echo "  - API Gateway: http://localhost:3000"
        echo "  - Auth Service: http://localhost:3001"
        echo "  - User Service: http://localhost:3002"
        echo "  - Adminer: http://localhost:8080"
        echo "  - Redis Commander: http://localhost:8081"
        echo "  - MailHog: http://localhost:8025"
        ;;
    
    "prod")
        echo -e "${BLUE}üöÄ Iniciando ambiente de produ√ß√£o...${NC}"
        check_docker
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
        wait_for_services
        echo -e "${GREEN}‚úÖ Ambiente de produ√ß√£o iniciado!${NC}"
        echo -e "${BLUE}üìã URLs dispon√≠veis:${NC}"
        echo "  - API Gateway: https://localhost"
        echo "  - Grafana: http://localhost:3001"
        echo "  - Prometheus: http://localhost:9090"
        echo "  - Alertmanager: http://localhost:9093"
        ;;
    
    "test")
        echo -e "${BLUE}üß™ Executando testes...${NC}"
        check_docker
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        echo -e "${GREEN}‚úÖ Testes conclu√≠dos!${NC}"
        ;;
    
    "stop")
        echo -e "${YELLOW}‚èπÔ∏è  Parando todos os servi√ßos...${NC}"
        docker-compose down
        echo -e "${GREEN}‚úÖ Servi√ßos parados!${NC}"
        ;;
    
    "restart")
        echo -e "${YELLOW}üîÑ Reiniciando servi√ßos...${NC}"
        docker-compose restart
        wait_for_services
        echo -e "${GREEN}‚úÖ Servi√ßos reiniciados!${NC}"
        ;;
    
    "logs")
        if [ -n "$2" ]; then
            echo -e "${BLUE}üìã Logs do servi√ßo $2:${NC}"
            docker-compose logs -f "$2"
        else
            echo -e "${BLUE}üìã Logs de todos os servi√ßos:${NC}"
            docker-compose logs -f
        fi
        ;;
    
    "status")
        echo -e "${BLUE}üìä Status dos servi√ßos:${NC}"
        docker-compose ps
        echo ""
        echo -e "${BLUE}üìä Uso de recursos:${NC}"
        docker stats --no-stream
        ;;
    
    "clean")
        echo -e "${YELLOW}üßπ Limpando containers e volumes...${NC}"
        docker-compose down -v --remove-orphans
        docker system prune -f
        echo -e "${GREEN}‚úÖ Limpeza conclu√≠da!${NC}"
        ;;
    
    "backup")
        echo -e "${BLUE}üíæ Fazendo backup do banco de dados...${NC}"
        BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
        docker-compose exec mysql mysqldump -u root -p${MYSQL_ROOT_PASSWORD:-root123} ${MYSQL_DATABASE:-cartorio} > "$BACKUP_FILE"
        echo -e "${GREEN}‚úÖ Backup salvo em: $BACKUP_FILE${NC}"
        ;;
    
    "restore")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Por favor, especifique o arquivo de backup:${NC}"
            echo "Uso: $0 restore backup_file.sql"
            exit 1
        fi
        
        echo -e "${BLUE}üì• Restaurando backup: $2${NC}"
        docker-compose exec -T mysql mysql -u root -p${MYSQL_ROOT_PASSWORD:-root123} ${MYSQL_DATABASE:-cartorio} < "$2"
        echo -e "${GREEN}‚úÖ Backup restaurado!${NC}"
        ;;
    
    "health")
        echo -e "${BLUE}üè• Verificando sa√∫de dos servi√ßos...${NC}"
        
        local services=("api-gateway:3000" "auth-service:3001" "user-service:3002")
        
        for service in "${services[@]}"; do
            local name=$(echo $service | cut -d: -f1)
            local port=$(echo $service | cut -d: -f2)
            
            if curl -f http://localhost:$port/health &> /dev/null; then
                echo -e "${GREEN}‚úÖ $name: Saud√°vel${NC}"
            else
                echo -e "${RED}‚ùå $name: N√£o saud√°vel${NC}"
            fi
        done
        ;;
    
    "scale")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Por favor, especifique o servi√ßo e n√∫mero de r√©plicas:${NC}"
            echo "Uso: $0 scale service=replicas"
            echo "Exemplo: $0 scale api-gateway=3"
            exit 1
        fi
        
        echo -e "${BLUE}üìà Escalando servi√ßo: $2${NC}"
        docker-compose up -d --scale "$2"
        echo -e "${GREEN}‚úÖ Servi√ßo escalado!${NC}"
        ;;
    
    "update")
        echo -e "${BLUE}üîÑ Atualizando imagens...${NC}"
        docker-compose pull
        docker-compose up -d
        wait_for_services
        echo -e "${GREEN}‚úÖ Atualiza√ß√£o conclu√≠da!${NC}"
        ;;
    
    "help"|"-h"|"--help"|"")
        show_help
        ;;
    
    *)
        echo -e "${RED}‚ùå Comando n√£o reconhecido: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
