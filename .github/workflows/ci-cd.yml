name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de testes
  test:
    name: Testes Automatizados
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: cartorio_test
          MYSQL_USER: cartorio
          MYSQL_PASSWORD: cartorio123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependências
      run: |
        npm ci
        cd services/api-gateway && npm ci
        cd ../auth-service && npm ci
        cd ../user-service && npm ci

    - name: Executar linting
      run: |
        cd services/api-gateway && npm run lint || true
        cd ../auth-service && npm run lint || true
        cd ../user-service && npm run lint

    - name: Executar testes unitários
      run: |
        cd services/auth-service && npm test
        cd ../user-service && npm test
      env:
        DATABASE_URL: mysql://cartorio:cartorio123@localhost:3306/cartorio_test
        JWT_SECRET: test-jwt-secret
        REDIS_URL: redis://localhost:6379

    - name: Executar testes de integração
      run: |
        cd services/auth-service && npm run test:e2e || true
        cd ../user-service && npm run test:e2e || true
      env:
        DATABASE_URL: mysql://cartorio:cartorio123@localhost:3306/cartorio_test
        JWT_SECRET: test-jwt-secret
        REDIS_URL: redis://localhost:6379

    - name: Gerar relatório de cobertura
      run: |
        cd services/auth-service && npm run test:coverage
        cd ../user-service && npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./services/*/coverage/lcov.info
        fail_ci_if_error: false

  # Job de build e push de imagens
  build-and-push:
    name: Build e Push de Imagens Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build e push da imagem
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deploy (apenas para main)
  deploy:
    name: Deploy para Produção
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Deploy para servidor
      run: |
        echo "Deploy para produção seria executado aqui"
        echo "Exemplo: kubectl apply -f k8s/ ou docker-compose up -d"
      # Aqui você adicionaria os comandos reais de deploy
      # Por exemplo, usando kubectl, docker-compose, ou outros orquestradores

  # Job de notificação
  notify:
    name: Notificação de Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: always()
    
    steps:
    - name: Notificar sucesso
      if: needs.test.result == 'success' && needs.build-and-push.result == 'success'
      run: |
        echo "✅ Pipeline executado com sucesso!"
        # Aqui você pode adicionar notificações para Slack, Discord, etc.

    - name: Notificar falha
      if: needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Pipeline falhou!"
        # Aqui você pode adicionar notificações de erro
