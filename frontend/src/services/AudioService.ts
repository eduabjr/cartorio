// Servi√ßo para gerenciar √°udio e testes de som
export interface AudioTestResult {
  success: boolean;
  message: string;
  error?: string;
  audioContext?: AudioContext;
  oscillator?: OscillatorNode;
}

export interface AudioCapabilities {
  hasAudioContext: boolean;
  hasWebAudio: boolean;
  hasMediaDevices: boolean;
  hasSpeechSynthesis: boolean;
  hasAudioWorklet: boolean;
  sampleRate?: number;
  maxChannels?: number;
}

class AudioService {
  private audioContext: AudioContext | null = null;
  private isInitialized = false;
  private testResults: AudioTestResult[] = [];

  /**
   * Inicializa o servi√ßo de √°udio
   */
  async initialize(): Promise<boolean> {
    try {
      console.log('üîä Inicializando AudioService...');
      
      // Verificar se o navegador suporta Web Audio API
      if (!window.AudioContext && !(window as any).webkitAudioContext) {
        console.error('‚ùå Web Audio API n√£o suportada');
        return false;
      }

      // Se j√° temos um contexto v√°lido, retornar true
      if (this.audioContext && this.audioContext.state !== 'closed') {
        console.log('‚úÖ Contexto de √°udio j√° inicializado');
        return true;
      }

      // Criar contexto de √°udio
      const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;
      this.audioContext = new AudioContextClass();
      
      // Verificar se o contexto est√° suspenso (requer intera√ß√£o do usu√°rio)
      if (this.audioContext.state === 'suspended') {
        console.log('‚è∏Ô∏è Contexto de √°udio suspenso - aguardando intera√ß√£o do usu√°rio');
      }

      this.isInitialized = true;
      console.log('‚úÖ AudioService inicializado com sucesso');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar AudioService:', error);
      this.audioContext = null;
      this.isInitialized = false;
      return false;
    }
  }

  /**
   * Verifica as capacidades de √°udio do sistema
   */
  getAudioCapabilities(): AudioCapabilities {
    const capabilities: AudioCapabilities = {
      hasAudioContext: !!(window.AudioContext || (window as any).webkitAudioContext),
      hasWebAudio: !!(window.AudioContext || (window as any).webkitAudioContext),
      hasMediaDevices: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
      hasSpeechSynthesis: !!(window.speechSynthesis),
      hasAudioWorklet: false // Desabilitado por enquanto para evitar erros
    };

    if (this.audioContext) {
      try {
        capabilities.sampleRate = this.audioContext.sampleRate;
        capabilities.maxChannels = this.audioContext.destination.maxChannelCount;
      } catch (error) {
        console.warn('Erro ao obter informa√ß√µes do contexto de √°udio:', error);
      }
    }

    return capabilities;
  }

  /**
   * Testa o som b√°sico do sistema
   */
  async testBasicAudio(): Promise<AudioTestResult> {
    try {
      console.log('üîä Testando √°udio b√°sico...');

      if (!this.audioContext) {
        await this.initialize();
      }

      if (!this.audioContext) {
        return {
          success: false,
          message: 'Contexto de √°udio n√£o dispon√≠vel',
          error: 'AudioContext n√£o foi criado'
        };
      }

      // Se o contexto estiver suspenso, tentar resumir
      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume();
        console.log('‚ñ∂Ô∏è Contexto de √°udio resumido');
      }

      // Criar oscilador para teste
      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      // Configurar oscilador
      oscillator.type = 'sine';
      oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime); // L√° central (440Hz)

      // Configurar ganho (volume)
      gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime); // Volume baixo
      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);

      // Conectar n√≥s
      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      // Tocar som por 0.5 segundos
      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + 0.5);

      const result: AudioTestResult = {
        success: true,
        message: 'Teste de √°udio b√°sico executado com sucesso',
        audioContext: this.audioContext,
        oscillator
      };

      this.testResults.push(result);
      console.log('‚úÖ Teste de √°udio b√°sico conclu√≠do');
      return result;

    } catch (error) {
      const result: AudioTestResult = {
        success: false,
        message: 'Erro no teste de √°udio b√°sico',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };

      this.testResults.push(result);
      console.error('‚ùå Erro no teste de √°udio b√°sico:', error);
      return result;
    }
  }

  /**
   * Testa s√≠ntese de voz
   */
  async testSpeechSynthesis(text: string = 'Teste de s√≠ntese de voz'): Promise<AudioTestResult> {
    try {
      console.log('üó£Ô∏è Testando s√≠ntese de voz...');

      if (!window.speechSynthesis) {
        return {
          success: false,
          message: 'S√≠ntese de voz n√£o suportada',
          error: 'speechSynthesis n√£o dispon√≠vel'
        };
      }

      return new Promise((resolve) => {
        const utterance = new SpeechSynthesisUtterance(text);
        
        utterance.onstart = () => {
          console.log('‚ñ∂Ô∏è S√≠ntese de voz iniciada');
        };

        utterance.onend = () => {
          const result: AudioTestResult = {
            success: true,
            message: 'Teste de s√≠ntese de voz executado com sucesso'
          };
          this.testResults.push(result);
          console.log('‚úÖ Teste de s√≠ntese de voz conclu√≠do');
          resolve(result);
        };

        utterance.onerror = (event) => {
          const result: AudioTestResult = {
            success: false,
            message: 'Erro na s√≠ntese de voz',
            error: `Erro: ${event.error}`
          };
          this.testResults.push(result);
          console.error('‚ùå Erro na s√≠ntese de voz:', event.error);
          resolve(result);
        };

        // Configurar voz em portugu√™s se dispon√≠vel
        const voices = speechSynthesis.getVoices();
        const portugueseVoice = voices.find(voice => 
          voice.lang.startsWith('pt') || voice.lang.includes('pt-BR')
        );
        
        if (portugueseVoice) {
          utterance.voice = portugueseVoice;
          console.log('üáßüá∑ Usando voz em portugu√™s:', portugueseVoice.name);
        }

        utterance.rate = 0.8;
        utterance.pitch = 1.0;
        utterance.volume = 0.7;

        speechSynthesis.speak(utterance);
      });

    } catch (error) {
      const result: AudioTestResult = {
        success: false,
        message: 'Erro no teste de s√≠ntese de voz',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };

      this.testResults.push(result);
      console.error('‚ùå Erro no teste de s√≠ntese de voz:', error);
      return result;
    }
  }

  /**
   * Testa √°udio com diferentes frequ√™ncias
   */
  async testFrequencySweep(): Promise<AudioTestResult> {
    try {
      console.log('üéµ Testando varredura de frequ√™ncias...');

      if (!this.audioContext) {
        await this.initialize();
      }

      if (!this.audioContext) {
        return {
          success: false,
          message: 'Contexto de √°udio n√£o dispon√≠vel',
          error: 'AudioContext n√£o foi criado'
        };
      }

      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume();
      }

      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.type = 'sine';
      gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      // Varredura de frequ√™ncias de 200Hz a 800Hz
      oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime);
      oscillator.frequency.exponentialRampToValueAtTime(800, this.audioContext.currentTime + 2);

      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 2);

      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + 2);

      const result: AudioTestResult = {
        success: true,
        message: 'Teste de varredura de frequ√™ncias executado com sucesso',
        audioContext: this.audioContext,
        oscillator
      };

      this.testResults.push(result);
      console.log('‚úÖ Teste de varredura de frequ√™ncias conclu√≠do');
      return result;

    } catch (error) {
      const result: AudioTestResult = {
        success: false,
        message: 'Erro no teste de varredura de frequ√™ncias',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };

      this.testResults.push(result);
      console.error('‚ùå Erro no teste de varredura de frequ√™ncias:', error);
      return result;
    }
  }

  /**
   * Executa todos os testes de √°udio
   */
  async runAllTests(): Promise<AudioTestResult[]> {
    console.log('üß™ Executando todos os testes de √°udio...');
    
    const results: AudioTestResult[] = [];
    
    // Teste 1: √Åudio b√°sico
    results.push(await this.testBasicAudio());
    
    // Aguardar um pouco entre os testes
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Teste 2: S√≠ntese de voz
    results.push(await this.testSpeechSynthesis('Sistema de √°udio funcionando corretamente'));
    
    // Aguardar um pouco entre os testes
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Teste 3: Varredura de frequ√™ncias
    results.push(await this.testFrequencySweep());

    console.log('‚úÖ Todos os testes de √°udio conclu√≠dos');
    return results;
  }

  /**
   * Obt√©m hist√≥rico de testes
   */
  getTestResults(): AudioTestResult[] {
    return [...this.testResults];
  }

  /**
   * Limpa hist√≥rico de testes
   */
  clearTestResults(): void {
    this.testResults = [];
  }

  /**
   * Verifica se o √°udio est√° funcionando
   */
  isAudioWorking(): boolean {
    return this.testResults.some(result => result.success);
  }

  /**
   * Obt√©m status do contexto de √°udio
   */
  getAudioContextState(): string {
    return this.audioContext?.state || 'n√£o inicializado';
  }

  /**
   * For√ßa a inicializa√ß√£o do contexto de √°udio (requer intera√ß√£o do usu√°rio)
   */
  async forceInitialize(): Promise<boolean> {
    try {
      if (!this.audioContext) {
        return await this.initialize();
      }

      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume();
        console.log('‚ñ∂Ô∏è Contexto de √°udio for√ßado a resumir');
      }

      return true;
    } catch (error) {
      console.error('‚ùå Erro ao for√ßar inicializa√ß√£o:', error);
      // Tentar recriar o contexto se houver erro
      this.audioContext = null;
      this.isInitialized = false;
      return await this.initialize();
    }
  }
}

// Inst√¢ncia singleton
export const audioService = new AudioService();
